/*

Modified code from source:
http://docs.opencv.org/master/d1/dc5/tutorial_background_subtraction.html#gsc.tab=0

*/

//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C++
#include <iostream>
#include <sstream>

using namespace cv;
using namespace std;

// Global variables
Mat frame; //normal frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard

//white detection upper and lower bound:
cv::Scalar lower = cv::Scalar(255,255,255);
cv::Scalar upper = cv::Scalar(255,255,255);

// function prototype allows it to be called in the main function
// before it is actually defined
void processFeed(void);

int main(int argc, char* argv[])
{
    //create GUI windows
    namedWindow("Normal");
    namedWindow("Motion-senitive");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    processFeed();

    //Destroy all windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processFeed(void) {
    //VideoCapture capture(videoFilename);
    //open live feed from default camera.
    VideoCapture capture;
    capture.open(0);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video feed." << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        Mat thres = fgMaskMOG2;
        Mat mask = thres.clone();

        //update the background model
        pMOG2->apply(frame, fgMaskMOG2);
        //get the frame number and write it on the current frame
        stringstream ss;
     //   rectangle(fgMaskMOG2, cv::Point(10, 2), cv::Point(100,20),
     //       cv::Scalar(255,255,255), -1);
        rectangle(mask, cv::Point(10, 2), cv::Point(100,20),
            cv::Scalar(255,255,255), -1);

        float minRatio = 0.3f;
        cv::Size block(16, 26);

        for(int j = 0; j < fgMaskMOG2.rows; j += block.height) {
            for(int i = 0; i < fgMaskMOG2.cols; i += block.width) {

                cv::Rect currentBlock(i, j, block.width, block.height);

                unsigned int cWhite = 0, cBlack = 0;

                for (int y = currentBlock.y; y < currentBlock.y + currentBlock.height; ++y) {
                    for(int x = currentBlock.x; x < currentBlock.x + currentBlock.width; ++x) {
                        if(thres.at<unsigned char>(y,x == 255))
                            cWhite++;
                        else cBlack++;
                    }
                }

                unsigned char blockColor = 0;
                if((float)cWhite/(float)(cBlack+cWhite) > minRatio) blockColor = 255;

                for(int y = currentBlock.y; y < currentBlock.y + currentBlock.height; ++y) {
                    for(int x = currentBlock.x; x < currentBlock.x + currentBlock.width; ++x) {

                        if((y < fgMaskMOG2.rows) && (x < fgMaskMOG2.cols)) {
                            mask.at<unsigned char>(y,x) = blockColor;
                        }

                    }
                }
            }
        }

        ss << capture.get(CAP_PROP_POS_FRAMES);
        string frameNumberString = ss.str();

        putText(mask, frameNumberString.c_str(), cv::Point(15, 15),
            FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));

        //show the current frame and the fg masks
        imshow("Normal", frame);
        //imshow("Motion-senitive", fgMaskMOG2);
        imshow("Motion-senitive", mask);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
    }
    //delete capture object
    capture.release();
}